name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Run Tests
      run: |
        pio test -e esp32dev
    
    - name: Build firmware
      run: |
        pio run -e esp32dev
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          .pio/build/*/
          test/

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Build firmware
      run: |
        pio run -e esp32dev
        pio run -e esp32dev_debug
    
    - name: Prepare release files
      run: |
        mkdir -p release
        cp .pio/build/esp32dev/firmware.bin release/teams-redlight-firmware.bin
        cp .pio/build/esp32dev_debug/firmware.bin release/teams-redlight-firmware-debug.bin
        
        # Create version info
        echo "Build Date: $(date)" > release/build-info.txt
        echo "Commit: ${{ github.sha }}" >> release/build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> release/build-info.txt
        
        # Copy web files
        cp -r web release/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: firmware-build
        path: release/
    
    - name: Create Release (on tag)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/teams-redlight-firmware.bin
          release/teams-redlight-firmware-debug.bin
          release/build-info.txt
        body: |
          ## Teams Red Light Firmware Release
          
          ### Features
          - ESP32 firmware for Teams presence monitoring
          - Web-based configuration interface
          - Microsoft Graph API integration
          - OTA firmware updates
          - Persistent configuration storage
          
          ### Installation
          1. Download `teams-redlight-firmware.bin`
          2. Use the [web flasher](https://fchapleau.github.io/teams-redlight/) to flash your ESP32
          3. Connect to the "Teams Red Light" WiFi network
          4. Configure your settings at http://192.168.4.1
          
          ### Wiring
          - Connect an LED with appropriate resistor to GPIO 2
          - Connect ESP32 to power via USB or external supply
          
          Built from commit: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-web:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: firmware-build
        path: build/
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/web
        cname: teams-redlight.github.io